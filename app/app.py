import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Select device: GPU if available, else CPU
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Load tokenizer and model from local directory
tokenizer = AutoTokenizer.from_pretrained("rat45/sql-lora-fp32")
model = AutoModelForCausalLM.from_pretrained("rat45/sql-lora-fp32").to(device)


# Define generation function
def generate_sql(prompt):
    inputs = tokenizer(prompt, return_tensors="pt").to(device)
    outputs = model.generate(
        **inputs,
        max_new_tokens=64,  # speed things up
        do_sample=True,
        temperature=0.7,
        top_p=0.95,
        eos_token_id=tokenizer.eos_token_id,
        early_stopping=True
    )
    full_output = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return full_output[len(prompt):].strip()  # remove prompt from beginning


# Gradio UI
interface = gr.Interface(
    fn=generate_sql,
    inputs=gr.Textbox(lines=3, placeholder="Enter instruction, e.g. 'Show all users with age > 30'"),
    outputs="text",
    title="ðŸ§  SQL Generator",
    description="Type a natural language prompt and get a SQL query generated by the fine-tuned TinyLlama model.",
    theme="default"
)

interface.launch(share=True)